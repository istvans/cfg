#!/usr/bin/env bash

#=================================== FUNC =====================================
function is_installed
{
    app=$1
    which $app
    return $?
}

function warn
{
    echo "$@" >&2
}

function exit_with_msg
{
    warn $@
    exit 1
}

function force_home_links
{
     for file in $@; do
         ln -sf $CFG_DIR/$file $HOME/.
         if [ "$MALNA" = true ]; then
             sudo ln -sf $HOME/$file ~root/.
         fi
     done
}


#=================================== MAIN =====================================
if $BATCH_MODE; then
    ASSUME_YES="--assume-yes"
else
    ASSUME_YES=""
fi

if [ ! $(is_installed git) ]; then
    exit_with_msg "missing git? this script should have been git cloned!"
fi

CFG_DIR=$HOME/cfg
if [ ! -d $CFG_DIR ]; then
    if [[ "$(basename $PWD)" = "$CFG_DIR" ]]; then
        CFG_DIR=$PWD
    else
        exit_with_msg "Cannot find the $CFG_DIR directory!"
    fi
fi

. $CFG_DIR/argparse
. $CFG_DIR/.bash_functions

echo "CFG_DIR:'$CFG_DIR'"

if [ "$MALNA" = true ]; then
    if [ ! $(is_installed expressvpn) ]; then
        express_vpn_installer="$(find $CFG_DIR -maxdepth 1 -name 'expressvpn*' -print -quit)"
        if [[ -z "$express_vpn_installer" ]]; then
            exit_with_msg "put an expressvpn installer into $CFG_DIR/ and try again"
        fi
        echo "ExpressVPN installer:'$express_vpn_installer'"
    fi
fi

BIN_DIR=$HOME/bin
if [ ! -d $BIN_DIR ]; then
    mkdir $BIN_DIR
    crashburn "Failed to create $BIN_DIR"
fi
echo "BIN_DIR:'$BIN_DIR'"

echo "let's start with making sure we have all the essential apps..."
if [ "$MALNA" = true ]; then
    sudo apt-get update
    sudo apt-get $ASSUME_YES install build-essential cron htop make man procps transmission-daemon vim \
        wget
else
    if [ ! $(is_installed vim) ]; then
        exit_with_msg "vim is missing!"
    fi
fi

printf "setup git... "
git config --global user.email "stevesiroki@gmail.com"
git config --global user.name "István Siroki"
git config --global core.editor "vim"
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
if [ "$MALNA" = true ]; then
    git config --global credential.helper 'cache --timeout=3600'
fi
echo done

printf "setup vim... "
TYPE_SCRIPT_SYNTAX="typescript-vim"
TYPE_SCRIPT_SYNTAX_DIR="$HOME/.vim/pack/typescript/start"
if [ ! -d $TYPE_SCRIPT_SYNTAX_DIR ]; then
    mkdir -p $TYPE_SCRIPT_SYNTAX_DIR
    git clone https://github.com/leafgarland/$TYPE_SCRIPT_SYNTAX.git $TYPE_SCRIPT_SYNTAX_DIR/$TYPE_SCRIPT_SYNTAX
fi
echo done

echo "setup locales..."
DEFAULT_LOCALE=/etc/default/locale
if [[ ! -f $DEFAULT_LOCALE || "$(tail -n1 /etc/default/locale | cut -f2 -d =)" != "$LANG" ]]; then
    sudo dpkg-reconfigure locales
    sudo update-locale
fi
echo done

printf "setup bash... "
. $CFG_DIR/.bash_envars
force_home_links .bash_profile .bashrc .bash_aliases .bash_envars .bash_functions .vimrc
echo done

if [ "$MALNA" = true ]; then
    BASH_GIT_PROMPT_DIR=$HOME/$BASH_GIT_PROMPT
    if [ ! -d $BASH_GIT_PROMPT_DIR ]; then
        git clone https://github.com/magicmonty/bash-git-prompt.git $BASH_GIT_PROMPT_DIR --depth=1
    fi

    PYTHON3=python3.9
    if [ ! $(is_installed $PYTHON3) ]; then
        if $BATCH_MODE; then
            echo "Failed to detect $PYTHON3... installing it (takes ~2.5 hours)..."
            choice="y"
        else
            read -p "Failed to detect $PYTHON3... shall we build it (takes ~2.5 hours)? (y/n) " choice
        fi
        if [ "$choice" = "y" ]; then
            start=$(date +%s)

            echo "... prerequisites ..."
            sudo apt-get $ASSUME_YES install openssl zlib1g-dev

            printf "... determining the system's openssl version: "
            # without this build the ssl python module would be missing
            # we use the same version what we have on the system thus at the end this whole build
            # can be removed i.e. it is only needed while building $PYTHON3
            OPEN_SSL_VERSION=$(openssl version | grep -oP "\d+\.\d+\.\d+[^ ]+")
            crashburn
            echo "$OPEN_SSL_VERSION ..."
            OPEN_SSL=openssl-$OPEN_SSL_VERSION
            SOURCE_TAR=$OPEN_SSL.tar.gz

            SSL_SOURCE_ADDRESS=https://www.openssl.org/source/$SOURCE_TAR
            echo "... download $SSL_SOURCE_ADDRESS ..."
            SSL_INSTALL_DIR=/opt/openssl
            sudo mkdir -p $SSL_INSTALL_DIR >/dev/null 2>&1
            sudo wget -c $SSL_SOURCE_ADDRESS -o $SSL_INSTALL_DIR/$SOURCE_TAR
            crashburn

            cd $SSL_INSTALL_DIR
            crashburn

            echo "... unpack $SOURCE_TAR ..."
            sudo tar -xzf $SOURCE_TAR
            crashburn

            echo "... configure $OPEN_SSL ..."
            sudo ./config -fPIC -shared --prefix=$SSL_INSTALL_DIR --openssldir=$SSL_INSTALL_DIR
            crashburn

            echo "... build $OPEN_SSL ..."
            sudo make
            crashburn

            echo "... install $OPEN_SSL under $SSL_INSTALL_DIR ..."
            sudo make install
            crashburn

            cd -
            crashburn

            PY_BUILD_DIR=/tmp/python_build
            echo "... creating $PY_BUILD_DIR ..."
            mkdir -p $PY_BUILD_DIR >/dev/null 2>&1

            cd $PY_BUILD_DIR
            crashburn

            PY_CONFIG_DIR=Python-3.9.0
            PY_TAR_FILE=$PY_CONFIG_DIR.tgz
            PY_SOURCE_ADDRESS=https://www.python.org/ftp/python/3.9.0/$PY_TAR_FILE
            echo "... download $PY_SOURCE_ADDRESS ..."
            wget -c $PY_SOURCE_ADDRESS
            crashburn

            echo "... unpack $PY_TAR_FILE ..."
            tar -xzf $PY_TAR_FILE
            crashburn

            echo "... configure $PYTHON3 ..."
            PY_SETUP=$PY_CONFIG_DIR/Modules/Setup
            sed --in-place '
                /SSL=/,/$(SSL).*[^\\]$/ {
                    s/^#//
                    s#^\(SSL=\).*$#\1/'$SSL_INSTALL_DIR'#
                }
            ' $PY_SETUP
            PY_TARGET=/opt/$PYTHON3
            $PY_CONFIG_DIR/configure --with-openssl=$SSL_INSTALL_DIR --prefix=$PY_TARGET --enable-optimizations
            crashburn

            echo "... build $PYTHON3 ..."
            export LD_LIBRARY_PATH=$SSL_INSTALL_DIR/lib
            make
            crashburn

            echo "... install $PYTHON3 ..."
#            # without this hack install fails with
#            OFFICIAL_LIB_DIR=/usr/lib/arm-linux-gnueabihf
#            LIB_SSL=libssl.so.1.1
#            LIB_CRYPTO=libcrypto.so.1.1
#            sudo mv $OFFICIAL_LIB_DIR/$LIB_SSL $OFFICIAL_LIB_DIR/$LIB_SSL.old
#            crashburn
#            sudo cp $SSL_INSTALL_DIR/lib/$LIB_SSL $OFFICIAL_LIB_DIR/$LIB_SSL
#            crashburn
#            sudo mv $OFFICIAL_LIB_DIR/$LIB_CRYPTO $OFFICIAL_LIB_DIR/$LIB_CRYPTO.old
#            crashburn
#            sudo cp $SSL_INSTALL_DIR/lib/$LIB_CRYPTO $OFFICIAL_LIB_DIR/$LIB_CRYPTO
#            crashburn
            sudo make install
            crashburn
#            # revert the hack by restoring the original files
#            sudo mv $OFFICIAL_LIB_DIR/$LIB_CRYPTO.old $OFFICIAL_LIB_DIR/$LIB_CRYPTO
#            crashburn
#            sudo mv $OFFICIAL_LIB_DIR/$LIB_SSL.old $OFFICIAL_LIB_DIR/$LIB_SSL
#            crashburn
            sudo ln -sf $PY_TARGET/bin/python3 /usr/bin/$PYTHON3
            crashburn

            cd -
            crashburn

            echo "... cleanup ..."
            sudo rm -rf $PY_BUILD_DIR
            crashburn
            sudo rm -rf $SSL_INSTALL_DIR
            crashburn

            end=$(date +%s)
            runtime=$((end-start))
            echo "done (took ${runtime}s)"
        else
            echo skipped
        fi
    fi

    DIGI_DIR=$HOME/digionline
    if [ ! -d $DIGI_DIR ]; then
        echo "setup digionline under $DIGI_DIR..."
        git clone https://github.com/istvans/digionline.git $DIGI_DIR
        $DIGI_DIR/osmc_installer.sh
    fi

    if [ ! $(is_installed expressvpn) ]; then
        echo "setup expressvpn..."
        sudo dpkg -i $express_vpn_installer
        expressvpn activate
        expressvpn autoconnect on
        expressvpn connect $VPN_SERVER
    fi
    expressvpn preferences

    printf "install VPN monitor... "
    ln -sf $CFG_DIR/monvpn $BIN_DIR/monvpn
    echo done

    echo "setup odrive..."
    if [ ! -d $ODRIVE_PATH ]; then
        mkdir -p $ODRIVE_PATH
    fi
    if [ ! -f $ODRIVE_AGENT ]; then
        wget https://dl.odrive.com/odriveagent-rpi -O - | tar -xz --directory=$ODRIVE_PATH
        if [ ! -f $ODRIVE_AGENT ]; then
            exit_with_msg "Failed to install '$ODRIVE_AGENT'"
        fi
    fi
    if [ ! -f $ODRIVE ]; then
        wget https://dl.odrive.com/odrive-py -O $ODRIVE
        if [ ! -f $ODRIVE ]; then
            exit_with_msg "Failed to install '$ODRIVE'"
        fi
    fi
    if [ ! -f $ODRIVE_AUTH_KEY_FILE ]; then
        if $BATCH_MODE; then
            warn "Please create $ODRIVE_AUTH_KEY_FILE later on"
        else
            touch $ODRIVE_AUTH_KEY_FILE
            chmod 600 $ODRIVE_AUTH_KEY_FILE
            read -p "please type in your secret odrive auth key: " auth_key
            echo "$auth_key" > $ODRIVE_AUTH_KEY_FILE
            chmod 400 $ODRIVE_AUTH_KEY_FILE
            . $CFG_DIR/.bash_envars  # to populate ODRIVE_AUTH_KEY from the new file
            if [ -z "$ODRIVE_AUTH_KEY" ]; then
                exit_with_msg "The odrive auth key is still empty... ¯\_(ツ)_/¯"
            fi
        fi
    fi
    ln -sf $CFG_DIR/odrive_common $BIN_DIR/odrive_common
    ln -sf $CFG_DIR/odrive_agent $BIN_DIR/odrive_agent
    ln -sf $CFG_DIR/odrive_sync $BIN_DIR/odrive_sync
    ln -sf $CFG_DIR/monodrive $BIN_DIR/monodrive
    echo done

    OLD_CRON="/var/tmp/crontab.old"
    printf "saving old crontab to '$OLD_CRON'... "
    crontab -l > $OLD_CRON
    echo done

    printf "install crontab... "
    crontab $CFG_DIR/cron
    echo done

    echo "setup transmission..."
    sudo systemctl stop transmission-daemon
    TRANSMISSION_DAEMON_CFG=/etc/transmission-daemon/settings.json
    if $BATCH_MODE; then
        warn "To configure the transmission daemon stop it, edit $TRANSMISSION_DAEMON_CFG, then start it"
    else
        echo "please configure the daemon"
        sleep 5
        sudo vim $TRANSMISSION_DAEMON_CFG
    fi
    sudo usermod -a -G debian-transmission $USER
    START_DAEMON_CMD=sudo systemctl start transmission-daemon
    sudo systemctl start transmission-daemon

    echo "setup samba..."
    sudo apt-get $ASSUME_YES install smb-app-osmc # must be the last step, it exits at the end...
fi
