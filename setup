#!/usr/bin/env bash
set -uo pipefail  # safer
# set -e would make the script exit if any of the if statements evaluates to false.
# This script tries to be correct and also robust i.e. fix things where possible, instead
# of just exiting straight away.
# With set -e the script might be shorter as all the `crashburn`s would be unnecessary.
# TODO go through the code and check whether it could also maintain the same robustness
# without horrendous effort.
# set -x would print each statement, but I'd like to keep the output succinct and
# would instead prefer helpful error messages. I might be wrong.
#=================================== FUNC =====================================
function create_home_links_with_backup
{
    local backup_dir=$HOME/home_link_backup
    for file in $@; do
        local real=$CFG_DIR/$file
        local link=$HOME/$file

        if [ -f "$link" ]; then
            local backup=$backup_dir/$file
            info "$link exists. creating a backup: $backup"
            mkdir $backup_dir 2>/dev/null
            if [ -f "$backup" ]; then
                info "$backup exists. keeping this original version!"
            else
                cp $link $backup
            fi
        fi

        info "Linking: '$link' -> '$real'"
        ln -sf $real $link

        if $MALNA_OS; then
            local root_link=~root/$file
            info "Linking: '$root_link' -> '$link'"
            sudo ln -sf $link $root_link
        fi
    done
}
#==============================================================================
function find_expressvpn_installer
{
    local installer_dir=$1
    find $installer_dir -maxdepth 1 -name 'expressvpn*' -print -quit
}
#==============================================================================
#=================================== MAIN =====================================
#==============================================================================
CFG_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
if [ ! -d "$CFG_DIR" ]; then
    echo "ERROR Cannot find the $CFG_DIR directory!" >&2
    exit 1
fi
echo "CFG_DIR:'$CFG_DIR'"

. $CFG_DIR/argparse  # import OSMC, BATCH_MODE, RASPBERRY_PI_OS
if [[ -z "${OSMC-}" ]]; then
    echo "ERROR Failed to source $CFG_DIR/argparse" >&2
    exit 2
fi

. $CFG_DIR/.bash_functions  # import is_installed, fatal_error, crashburn, warn, info, error
if [ ! "$(type is_installed)" ]; then
    echo "ERROR Failed to source $CFG_DIR/.bash_functions" >&2
    exit 3
fi

. $CFG_DIR/.bash_envars # import AUTOTEVE_CFG, EDITOR, LANG, VPN_INSTALL_ADDRESS and many more...
if [ -z "${EDITOR-}" ]; then
    echo "ERROR Failed to source $CFG_DIR/.bash_envars" >&2
    exit 4
fi

if [ ! -z "${MSYSTEM-}" ]; then
    MSYS=true
else
    MSYS=false
fi

if [[ ("$OSMC" = true) || ("$RASPBERRY_PI_OS" = true) ]]; then
    if $MSYS; then
        fatal_error "msys2 terminal was detected while OSMC:$OSMC and RASPBERRY_PI_OS:$RASPBERRY_PI_OS"
    fi
    MALNA_OS=true
else
    MALNA_OS=false
fi

if $BATCH_MODE; then
    if $MSYS; then
        ASSUME_YES="--noconfirm"
    else
        ASSUME_YES="--assume-yes"
    fi
else
    ASSUME_YES=""
fi

if [ ! $(is_installed git) ]; then
    fatal_error "git is not on the PATH"
fi

if [ ! $MSYS ]; then
    info "setup locale..."
    DEFAULT_LOCALE=/etc/default/locale
    if [[ ! -f $DEFAULT_LOCALE || "$(tail -n1 /etc/default/locale | cut -f2 -d =)" != "$LANG" ]]; then
        if $BATCH_MODE; then
            # TODO Is there a way to do this in a non-interactive way?
            fatal_error "$DEFAULT_LOCALE setup is needed which cannot be done in batch mode"
        fi
        sudo dpkg-reconfigure locales
        sudo update-locale
    fi
    info OK
fi

BIN_DIR=$HOME/bin
if [ ! -d $BIN_DIR ]; then
    mkdir $BIN_DIR
    crashburn
fi
info "BIN_DIR:'$BIN_DIR'"

# TODO extract each "setup block" into its own function?
# or at least the longer ones...

info "let's start with making sure we have all the essential apps..."
if $MALNA_OS; then
    sudo apt-get update
    crashburn
    sudo apt-get $ASSUME_YES install build-essential cron htop make man procps transmission-daemon \
        vim wget network-manager
    crashburn
elif $MSYS; then
    msys_packages="make vim"
    info "Installing msys packages: $msys_packages"
    pacman $ASSUME_YES -S $msys_packages
    crashburn
    info OK
else
    if [ ! $(is_installed vim) ]; then
        fatal_error "vim is missing!"
    fi
fi
info OK

info @single_line_start@ "setup git..."
git config --global user.email "stevesiroki@gmail.com"
git config --global user.name "Istv√°n Siroki"
git config --global core.editor "vim"
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
if $MALNA_OS; then
    git config --global credential.helper cache
    git config --global credential.helper 'cache --timeout=3600'
elif $MSYS; then
    git config --global credential.helper wincred
else
    info "git credential caching has NOT been setup"
fi
info @single_line_end@ OK

if $MALNA_OS; then
    info @single_line_start@ "setup vim..."
    TYPE_SCRIPT_SYNTAX="typescript-vim"
    TYPE_SCRIPT_SYNTAX_DIR="$HOME/.vim/pack/typescript/start"
    if [ ! -d $TYPE_SCRIPT_SYNTAX_DIR ]; then
        mkdir -p $TYPE_SCRIPT_SYNTAX_DIR
        git clone https://github.com/leafgarland/$TYPE_SCRIPT_SYNTAX.git $TYPE_SCRIPT_SYNTAX_DIR/$TYPE_SCRIPT_SYNTAX
    fi
    info @single_line_end@ OK
fi

info @single_line_start@ "setup bash..."
create_home_links_with_backup .bash_profile .bashrc .bash_aliases .bash_envars .bash_functions .vimrc
info @single_line_end@ OK

samba_was_installed=false
if $RASPBERRY_PI_OS; then
    info "begin Raspberry Pi OS-specific steps..."

    info "configure the raspberry pi os"
    cat << EOF
Recommended raspi-config settings:
 - "System Options" -> "Boot / Auto Login" -> "Console"
 - "System Options" -> "Hostname" -> whatever you'd like
 - "Display Options" -> "Composite Video" -> "Enable 4Kp60 HDMI"
 - "Performance Options" -> "GPU Memory" -> 320
 - "Advanced Options" -> "GL Driver" -> "GL (Fake KMS)"
EOF
    if $BATCH_MODE; then
        warn "Run 'sudo raspi-config'; it needs interactive mode"
    else
        need_another_go=true
        while $need_another_go; do
            read -p "type 'start' or 'done' (you're in a confirmation loop ;): " choice
            case $choice in
                start) sudo raspi-config
                    ;;
                done) need_another_go=false
                    ;;
                *) echo "unknown option"
                    ;;
            esac
        done
    fi
    info OK

    info "disable the swap"
    sudo systemctl disable dphys-swapfile.service
    crashburn
    info OK

    info "setup kodi"
    sudo apt-get $ASSUME_YES install kodi kodi-pvr-iptvsimple
    crashburn
    KODI_SERVICE_DIST_PATH=/lib/systemd/system/kodi.service
    if [ ! -f $KODI_SERVICE_DIST_PATH ]; then
        sudo cp $CFG_DIR/kodi.service $KODI_SERVICE_DIST_PATH
        crashburn
        sudo systemctl enable kodi.service
        crashburn
    fi
    info OK

    SOURCE_DEVICE=/dev/sda1
    info "mount $SOURCE_DEVICE $EXT_DRIVE_DIR..."
    ls $SOURCE_DEVICE >/dev/null
    crashburn
    if [ ! -d $EXT_DRIVE_DIR ]; then
        sudo mkdir $EXT_DRIVE_DIR
        crashburn
    fi
    if [[ ! $(mount | grep $EXT_DRIVE_DIR) ]]; then
        sudo mount $SOURCE_DEVICE $EXT_DRIVE_DIR
        crashburn
    fi
    ls $ENDRE >/dev/null
    crashburn
    USER_GROUP=$(getent group $USER | cut -d: -f1)
    crashburn
    chown_ext_disk=false
    if $BATCH_MODE; then
        chown_ext_disk=true
    else
        question="Shall we change the owner of all the files in $ENDRE"
        question="$question to $USER:$USER_GROUP? (y/n)"
        read -p "$question " choice
        [ "$choice" = "y" ] && chown_ext_disk=true
    fi
    if $chown_ext_disk; then
        info @single_line_start@ "... running recursive chown on $ENDRE ..."
        sudo chown --recursive $USER:$USER_GROUP $ENDRE
        crashburn
        info @single_line_end@ OK
    fi
    FSTAB=/etc/fstab
    if [[ ! $(grep $EXT_DRIVE_DIR $FSTAB) ]]; then
        info @single_line_start@ "... setup auto-mount via $FSTAB ..."
        sudo cp $FSTAB $FSTAB.orig
        crashburn
        echo "LABEL=Endre $EXT_DRIVE_DIR ext4 defaults,auto,users,rw,nofail" | sudo tee -a $FSTAB >/dev/null
        crashburn
        info @single_line_end@ OK
    fi
    info OK

    if $BATCH_MODE; then
        warn "samba installation would need interactive mode; skipped"
    else
        info "install samba..."
        sudo apt-get $ASSUME_YES install samba
        crashburn
        info OK
        samba_was_installed=true
    fi
fi

if $OSMC; then
    info "begin OSMC-specific steps..."

    info "install samba..."
    sudo apt-get $ASSUME_YES install smb-app-osmc
    crashburn
    info OK
    samba_was_installed=true
fi

if $MALNA_OS; then
    info "begin the common steps to setup a Raspberry Pi..."

    BASH_GIT_PROMPT_DIR=$HOME/$BASH_GIT_PROMPT
    if [ ! -d $BASH_GIT_PROMPT_DIR ]; then
        git clone https://github.com/magicmonty/bash-git-prompt.git $BASH_GIT_PROMPT_DIR --depth=1
    fi

    info "detect expressvpn..."

    install_or_update_express_vpn=false
    if [ $(is_installed expressvpn) ]; then
        regex="version ([^ ]+) -"
        [[ $(expressvpn --version) =~ $regex ]]
        crashburn
        installed_version=${BASH_REMATCH[1]}
        crashburn

        regex="_([^_]+)_"
        [[ "$VPN_INSTALL_ADDRESS" =~ $regex ]]
        crashburn
        configured_version=${BASH_REMATCH[1]}
        crashburn

        if [[ "$installed_version" != "$configured_version" ]]; then
            info "installed version: '$installed_version'"
            info "configured version: '$configured_version'"
            if $BATCH_MODE; then
                info "let's automagically install the configured version"
                install_or_update_express_vpn=true
            else
                express_vpn_confirmation="expressvpn does not seem to match the configured version."
                express_vpn_confirmation="${express_vpn_confirmation} shall we fix this? (y/n)"
                read -p "$express_vpn_confirmation" choice
                [ "$choice" = "y" ] && install_or_update_express_vpn=true
            fi
        else
            info "... found and up-to-date version: $installed_version ..."
            crashburn
        fi
    else
        install_or_update_express_vpn=true
    fi

    if $install_or_update_express_vpn; then
        info "let's install expressvpn..."

        INSTALLER_DIR=/tmp/
        express_vpn_installer="$(find_expressvpn_installer $INSTALLER_DIR)"
        if [[ -z "$express_vpn_installer" ]]; then
            info "downlad expressvpn from $VPN_INSTALL_ADDRESS..."
            wget -c $VPN_INSTALL_ADDRESS --directory-prefix=$INSTALLER_DIR
            crashburn
            express_vpn_installer="$(find_expressvpn_installer $INSTALLER_DIR)"
            crashburn
            info OK
        fi

        info "setup expressvpn using $express_vpn_installer..."
        sudo dpkg -i $express_vpn_installer
        crashburn
        info "cleanup installer..."
        rm $express_vpn_installer
        crashburn
        if $BATCH_MODE; then
            warn "Activate the account; needs interactive mode"
        else
            WAIT_FOR_VPN_DAEMON=5
            info "Waiting $WAIT_FOR_VPN_DAEMON seconds before trying to activate"
            expressvpn activate
            expressvpn autoconnect on
            expressvpn connect $VPN_SERVER
        fi

        info @single_line_start@ "install VPN monitor..."
        ln -sf $CFG_DIR/monvpn $BIN_DIR/monvpn
        info @single_line_end@ OK
    fi
    expressvpn preferences

    PYTHON3=python3.9
    info @single_line_start@ "detect $PYTHON3..."
    if [ $(is_installed $PYTHON3) ]; then
        info @single_line_end@ $($PYTHON3 --version)
        crashburn
    else
        info @single_line_end@ MISSING
        SETUP_TIME_ESTIMATE_H=2.5
        if $BATCH_MODE; then
            warn "Failed to detect $PYTHON3... installing it (takes ~$SETUP_TIME_ESTIMATE_H hours)..."
            choice="y"
        else
            read -p "Failed to detect $PYTHON3... shall we build it (takes ~$SETUP_TIME_ESTIMATE_H hours)? (y/n) " choice
        fi
        if [ "$choice" = "y" ]; then
            start=$(date +%s)

            info "... prerequisites ..."
            sudo apt-get $ASSUME_YES install openssl zlib1g-dev libffi-dev

            info @single_line_start@ "... determining the system's openssl version ..."
            # without this build the ssl python module would be missing
            # we use the same version what we have on the system thus at the end this whole build
            # can be removed i.e. it is only needed while building $PYTHON3
            OPEN_SSL_VERSION=$(openssl version | grep -oP "\d+\.\d+\.\d+[^ ]+")
            crashburn
            info @single_line_end@ "$OPEN_SSL_VERSION"
            OPEN_SSL=openssl-$OPEN_SSL_VERSION
            SOURCE_TAR=$OPEN_SSL.tar.gz

            SSL_SOURCE_ADDRESS=https://www.openssl.org/source/$SOURCE_TAR
            info "... download $SSL_SOURCE_ADDRESS ..."
            SSL_INSTALL_DIR=/opt/openssl
            sudo mkdir -p $SSL_INSTALL_DIR >/dev/null 2>&1
            sudo wget -c $SSL_SOURCE_ADDRESS --directory-prefix=$SSL_INSTALL_DIR
            crashburn

            info "... unpack $SOURCE_TAR ..."
            sudo tar -xzf $SSL_INSTALL_DIR/$SOURCE_TAR --directory=$SSL_INSTALL_DIR
            crashburn

            cd $SSL_INSTALL_DIR/$OPEN_SSL
            crashburn

            info "... configure $OPEN_SSL ..."
            sudo ./config -fPIC -shared --prefix=$SSL_INSTALL_DIR --openssldir=$SSL_INSTALL_DIR
            crashburn

            info "... build $OPEN_SSL ..."
            sudo make
            crashburn

            info "... install $OPEN_SSL under $SSL_INSTALL_DIR ..."
            sudo make install
            crashburn

            cd -
            crashburn

            PY_BUILD_DIR=/tmp/python_build
            info "... creating $PY_BUILD_DIR ..."
            mkdir -p $PY_BUILD_DIR >/dev/null 2>&1

            cd $PY_BUILD_DIR
            crashburn

            PY_VERSION=3.9.1
            PY_CONFIG_DIR=Python-$PY_VERSION
            PY_TAR_FILE=$PY_CONFIG_DIR.tgz
            PY_SOURCE_ADDRESS=https://www.python.org/ftp/python/$PY_VERSION/$PY_TAR_FILE
            info "... download $PY_SOURCE_ADDRESS ..."
            wget -c $PY_SOURCE_ADDRESS
            crashburn

            info "... unpack $PY_TAR_FILE ..."
            tar -xzf $PY_TAR_FILE
            crashburn

            info "... configure $PYTHON3 ..."
            PY_SETUP=$PY_CONFIG_DIR/Modules/Setup
            sed --in-place '
                /SSL=/,/$(SSL).*[^\\]$/ {
                    s/^#//
                    s#^\(SSL=\).*$#\1/'$SSL_INSTALL_DIR'#
                }
            ' $PY_SETUP
            PY_TARGET=/opt/$PYTHON3
            $PY_CONFIG_DIR/configure --with-openssl=$SSL_INSTALL_DIR --prefix=$PY_TARGET --enable-optimizations
            crashburn

            info "... build $PYTHON3 ..."
            export LD_LIBRARY_PATH=$SSL_INSTALL_DIR/lib
            make
            crashburn

            info "... install $PYTHON3 ..."
            sudo make install
            crashburn
            sudo ln -sf $PY_TARGET/bin/python3 /usr/bin/$PYTHON3
            crashburn

            info "... install pip and pipenv ..."
            wget https://bootstrap.pypa.io/get-pip.py
            crashburn
            $PYTHON3 ./get-pip.py
            crashburn
            $PYTHON3 -m pip install pipenv
            crashburn

            cd -
            crashburn

            info "... cleanup ..."
            sudo rm -rf $PY_BUILD_DIR
            crashburn
            sudo rm -rf $SSL_INSTALL_DIR
            crashburn

            end=$(date +%s)
            runtime=$((end-start))
            info "done (took ${runtime}s)"
        else
            info skipped
        fi
    fi

    if [ $(is_installed $PYTHON3) ]; then
        info "install $PYTHON3 dependent apps..."

        info "... setup autoteve ..."
        if [ ! -d "$AUTOTEVE_SRC_DIR" ]; then
            git clone https://github.com/istvans/autoteve.git $AUTOTEVE_SRC_DIR
            crashburn
        else
            info "...... no download; using the found source ......"
        fi

        cd $AUTOTEVE_SRC_DIR
        $PYTHON3 -m pipenv install
        crashburn
        cd -

        if [ ! -f $AUTOTEVE_CFG ]; then
            if $BATCH_MODE; then
                warn "You will need to create $AUTOTEVE_CFG before the next schedule"
            else
                mkdir -p $AUTOTEVE_CFG_DIR 2>/dev/null
                chmod 700 $AUTOTEVE_CFG_DIR
                crashburn
                touch $AUTOTEVE_CFG
                crashburn
                chmod 600 $AUTOTEVE_CFG
                crashburn
                echo "please configure autoteve" >&2
                sleep 5
                $EDITOR $AUTOTEVE_CFG
                crashburn
            fi
        else
            chmod 700 $AUTOTEVE_CFG_DIR
            crashburn
            chmod 600 $AUTOTEVE_CFG
            crashburn
        fi
        info OK
    else
        warn "Cannot install $PYTHON3 dependent apps! $PYTHON3 is missing"
    fi

    info "setup odrive..."
    if [ ! -d $ODRIVE_BIN_PATH ]; then
        mkdir -p $ODRIVE_BIN_PATH
    fi
    if [ ! -f $ODRIVE_AGENT ]; then
        wget https://dl.odrive.com/odriveagent-rpi --output-document=- | tar -xz --directory=$ODRIVE_BIN_PATH
        if [ ! -f $ODRIVE_AGENT ]; then
            fatal_error "Failed to install '$ODRIVE_AGENT'"
        fi
    fi
    if [ ! -f $ODRIVE ]; then
        wget https://dl.odrive.com/odrive-py --output-document=$ODRIVE
        if [ ! -f $ODRIVE ]; then
            fatal_error "Failed to install '$ODRIVE'"
        fi
    fi
    if [ ! -f $ODRIVE_AUTH_KEY_FILE ]; then
        if $BATCH_MODE; then
            warn "Please create $ODRIVE_AUTH_KEY_FILE before the next reboot"
        else
            touch $ODRIVE_AUTH_KEY_FILE
            crashburn
            chmod 600 $ODRIVE_AUTH_KEY_FILE
            crashburn
            read -p "please type in your secret odrive auth key: " auth_key
            echo "$auth_key" > $ODRIVE_AUTH_KEY_FILE
            crashburn
            chmod 400 $ODRIVE_AUTH_KEY_FILE
            crashburn
            . $CFG_DIR/.bash_envars  # to populate ODRIVE_AUTH_KEY from the new file
            if [[ -z "$ODRIVE_AUTH_KEY" ]]; then
                fatal_error "The odrive auth key is still empty... ¬Ø\_(„ÉÑ)_/¬Ø"
            fi
        fi
    else
        chmod 600 $ODRIVE_AUTH_KEY_FILE
        crashburn
        chmod 400 $ODRIVE_AUTH_KEY_FILE
        crashburn
    fi
    ln -sf $CFG_DIR/odrive_common $BIN_DIR/odrive_common
    ln -sf $CFG_DIR/odrive_agent $BIN_DIR/odrive_agent
    ln -sf $CFG_DIR/odrive_sync $BIN_DIR/odrive_sync
    ln -sf $CFG_DIR/monodrive $BIN_DIR/monodrive
    info OK

    OLD_CRON="/var/tmp/crontab.old"
    info @single_line_start@ "saving old crontab to '$OLD_CRON'..."
    crontab -l > $OLD_CRON
    info @single_line_end@ OK

    info @single_line_start@ "install crontab..."
    crontab $CFG_DIR/cron
    info @single_line_end@ OK

    info "setup transmission..."
    info @single_line_start@ "... run as $USER ..."
    TRANSMISSION_DAEMON=transmission-daemon
    sudo systemctl stop $TRANSMISSION_DAEMON
    crashburn
    TRANSMISSION_SERVICE_DAEMON_DIR=/etc/systemd/system/$TRANSMISSION_DAEMON.service.d
    if [ ! -d $TRANSMISSION_SERVICE_DAEMON_DIR ]; then
        sudo mkdir -p $TRANSMISSION_SERVICE_DAEMON_DIR
        crashburn
    fi
    sudo tee -a $TRANSMISSION_SERVICE_DAEMON_DIR/run-as-user.conf > /dev/null << EOL
[Service]
User=$USER
EOL
    crashburn
    sudo systemctl daemon-reload
    crashburn
    sudo systemctl start $TRANSMISSION_DAEMON
    crashburn
    sudo systemctl stop $TRANSMISSION_DAEMON
    info @single_line_end@ OK

    TRANSMISSION_DAEMON_CFG_PARTIAL_PATH=transmission-daemon/settings.json
    TRANSMISSION_DAEMON_CFG_SOURCE=$HOME/$TRANSMISSION_DAEMON_CFG_PARTIAL_PATH
    TRANSMISSION_DAEMON_CFG_TARGET=$HOME/.config/$TRANSMISSION_DAEMON_CFG_PARTIAL_PATH
    TRANSMISSION_DAEMON_CFG_BACKUP=$TRANSMISSION_DAEMON_CFG_TARGET.orig
    info @single_line_start@ "... looking for saved settings at $TRANSMISSION_DAEMON_CFG_SOURCE ..."
    transmission_use_cfg_source=false
    if [[ -f "$TRANSMISSION_DAEMON_CFG_SOURCE" ]]; then
        info @single_line_end@ EXISTS
        if $BATCH_MODE; then
            transmission_use_cfg_source=true
        else
            question="Shall we use the found config (type 'y') or you'd like to"
            question="$question set up transmission from its original config (type 'n')?"
            read -p "$question " choice
        fi
        [ "$choice" = "y" ] && transmission_use_cfg_source=true
    else
        info @single_line_end@ MISSING
    fi

    if $transmission_use_cfg_source; then
        info @single_line_start@ "... using the found config; backup: '$TRANSMISSION_DAEMON_CFG_BACKUP' ..."
        if [ ! -f $TRANSMISSION_DAEMON_CFG_BACKUP ]; then
            sudo cp $TRANSMISSION_DAEMON_CFG_TARGET $TRANSMISSION_DAEMON_CFG_BACKUP
            crashburn
        fi
        sudo cp $TRANSMISSION_DAEMON_CFG_SOURCE $TRANSMISSION_DAEMON_CFG_TARGET
        crashburn
        info @single_line_end@ OK
    else
        if $BATCH_MODE; then
            warn "To configure the transmission daemon stop it, edit $TRANSMISSION_DAEMON_CFG, then restart it"
        else
            echo "please configure the daemon" >&2
            sleep 5
            sudo $EDITOR $TRANSMISSION_DAEMON_CFG_TARGET
        fi
    fi
    sudo systemctl start transmission-daemon
    crashburn
    ln -sf $CFG_DIR/bounce_transmission $BIN_DIR/bounce_transmission
    crashburn
    info OK

    info "setup samba..."
    if $samba_was_installed; then
        SAMBA_CFG_DIR=/etc/samba
        if $OSMC; then
            sudo cp $CFG_DIR/smb-shares.conf $SAMBA_CFG_DIR/.
            crashburn
        else  # RASPBERRY_PI_OS
            SAMBA_BACKUP_CFG=$SAMBA_CFG_DIR/smb.conf.distributed
            if [ ! -f $SAMBA_BACKUP_CFG ]; then
                sudo cp $SAMBA_CFG_DIR/smb.conf $SAMBA_BACKUP_CFG
                crashburn
            fi
            sudo cp $CFG_DIR/smb.conf $SAMBA_CFG_DIR/.
            crashburn
            sudo cp $CFG_DIR/smb-local.conf /$SAMBA_CFG_DIR/.
            crashburn
            sudo cp $CFG_DIR/smb-shares.conf $SAMBA_CFG_DIR/.
            crashburn
        fi

        SAMBA_SERVICE=smbd
        SAMBA_MAGIC_WORD=titok
        if $(sudo pdbedit -u $USER -f | grep $SAMBA_MAGIC_WORD >/dev/null); then
            info "... $USER was already setup‚úÖ ..."
        else
            SAMBA_PASSWD="smbpasswd -a $USER"
            if $BATCH_MODE; then
                warn "To set the samba password run $SAMBA_PASSWD; then restart $SAMBA_SERVICE"
            else
                sudo $SAMBA_PASSWD
                crashburn
                sudo pdbedit -u $USER -f $SAMBA_MAGIC_WORD
                crashburn
            fi
        fi
        info "... restarting the samba service ..."
        sudo systemctl restart $SAMBA_SERVICE
        crashburn
        info "... you might need to restart explorer.exe on Windows after mapping a new samba share ..."
        info OK
    else
        warn "samba was not installed so this setup step is skipped too"
    fi

    DIGI_DIR=$HOME/digionline
    if [ ! -d $DIGI_DIR ]; then
        info "setup digionline under $DIGI_DIR..."
        git clone https://github.com/istvans/digionline.git $DIGI_DIR
        DIGI_INSTALLER=$DIGI_DIR/osmc_installer.sh
        if $BATCH_MODE; then
            # TODO implement batch mode in osmc_installer.sh?
            warn "Run $DIGI_INSTALLER after this setup (needs interactive mode)"
        else
            $DIGI_INSTALLER
            crashburn
        fi
    fi

    ###########################################################################
    #                              EXPERIMENTAL                               #
    #                   ONLY TESTED ON: RASPBERRY_PI_OS                       #
    ###########################################################################
    # Nothing at the moment.
fi

info "We are ready to go!"
